// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENTSCHEMA_SAMPLECLIENT_H_
#define FLATBUFFERS_GENERATED_CLIENTSCHEMA_SAMPLECLIENT_H_

#include "flatbuffers/flatbuffers.h"

namespace SampleClient {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Client;
struct ClientBuilder;

struct List_of_Clients;
struct List_of_ClientsBuilder;

enum Any : uint8_t {
  Any_NONE = 0,
  Any_Person = 1,
  Any_Group = 2,
  Any_MIN = Any_NONE,
  Any_MAX = Any_Group
};

inline const Any (&EnumValuesAny())[3] {
  static const Any values[] = {
    Any_NONE,
    Any_Person,
    Any_Group
  };
  return values;
}

inline const char * const *EnumNamesAny() {
  static const char * const names[4] = {
    "NONE",
    "Person",
    "Group",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  if (flatbuffers::IsOutRange(e, Any_NONE, Any_Group)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<SampleClient::Person> {
  static const Any enum_value = Any_Person;
};

template<> struct AnyTraits<SampleClient::Group> {
  static const Any enum_value = Any_Group;
};

bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int16_t age() const {
    return GetField<int16_t>(VT_AGE, 0);
  }
  int16_t weight() const {
    return GetField<int16_t>(VT_WEIGHT, 0);
  }
  const flatbuffers::String *gender() const {
    return GetPointer<const flatbuffers::String *>(VT_GENDER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_AGE) &&
           VerifyField<int16_t>(verifier, VT_WEIGHT) &&
           VerifyOffset(verifier, VT_GENDER) &&
           verifier.VerifyString(gender()) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(int16_t age) {
    fbb_.AddElement<int16_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(int16_t weight) {
    fbb_.AddElement<int16_t>(Person::VT_WEIGHT, weight, 0);
  }
  void add_gender(flatbuffers::Offset<flatbuffers::String> gender) {
    fbb_.AddOffset(Person::VT_GENDER, gender);
  }
  explicit PersonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline flatbuffers::Offset<Person> CreatePerson(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t age = 0,
    int16_t weight = 0,
    flatbuffers::Offset<flatbuffers::String> gender = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_gender(gender);
  builder_.add_name(name);
  builder_.add_weight(weight);
  builder_.add_age(age);
  return builder_.Finish();
}

inline flatbuffers::Offset<Person> CreatePersonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int16_t age = 0,
    int16_t weight = 0,
    const char *gender = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto gender__ = gender ? _fbb.CreateString(gender) : 0;
  return SampleClient::CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      gender__);
}

struct Group FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_G_NAME = 4,
    VT_G_AVG_AGE = 6,
    VT_G_AVG_WEIGHT = 8,
    VT_G_LIST_OF_NAMES = 10
  };
  const flatbuffers::String *g_name() const {
    return GetPointer<const flatbuffers::String *>(VT_G_NAME);
  }
  int16_t g_avg_age() const {
    return GetField<int16_t>(VT_G_AVG_AGE, 0);
  }
  int16_t g_avg_weight() const {
    return GetField<int16_t>(VT_G_AVG_WEIGHT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *g_list_of_names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_G_LIST_OF_NAMES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_G_NAME) &&
           verifier.VerifyString(g_name()) &&
           VerifyField<int16_t>(verifier, VT_G_AVG_AGE) &&
           VerifyField<int16_t>(verifier, VT_G_AVG_WEIGHT) &&
           VerifyOffset(verifier, VT_G_LIST_OF_NAMES) &&
           verifier.VerifyVector(g_list_of_names()) &&
           verifier.VerifyVectorOfStrings(g_list_of_names()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_g_name(flatbuffers::Offset<flatbuffers::String> g_name) {
    fbb_.AddOffset(Group::VT_G_NAME, g_name);
  }
  void add_g_avg_age(int16_t g_avg_age) {
    fbb_.AddElement<int16_t>(Group::VT_G_AVG_AGE, g_avg_age, 0);
  }
  void add_g_avg_weight(int16_t g_avg_weight) {
    fbb_.AddElement<int16_t>(Group::VT_G_AVG_WEIGHT, g_avg_weight, 0);
  }
  void add_g_list_of_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> g_list_of_names) {
    fbb_.AddOffset(Group::VT_G_LIST_OF_NAMES, g_list_of_names);
  }
  explicit GroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline flatbuffers::Offset<Group> CreateGroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> g_name = 0,
    int16_t g_avg_age = 0,
    int16_t g_avg_weight = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> g_list_of_names = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_g_list_of_names(g_list_of_names);
  builder_.add_g_name(g_name);
  builder_.add_g_avg_weight(g_avg_weight);
  builder_.add_g_avg_age(g_avg_age);
  return builder_.Finish();
}

inline flatbuffers::Offset<Group> CreateGroupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *g_name = nullptr,
    int16_t g_avg_age = 0,
    int16_t g_avg_weight = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *g_list_of_names = nullptr) {
  auto g_name__ = g_name ? _fbb.CreateString(g_name) : 0;
  auto g_list_of_names__ = g_list_of_names ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*g_list_of_names) : 0;
  return SampleClient::CreateGroup(
      _fbb,
      g_name__,
      g_avg_age,
      g_avg_weight,
      g_list_of_names__);
}

struct Client FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TYPE = 4,
    VT_CLIENT = 6
  };
  SampleClient::Any client_type() const {
    return static_cast<SampleClient::Any>(GetField<uint8_t>(VT_CLIENT_TYPE, 0));
  }
  const void *client() const {
    return GetPointer<const void *>(VT_CLIENT);
  }
  template<typename T> const T *client_as() const;
  const SampleClient::Person *client_as_Person() const {
    return client_type() == SampleClient::Any_Person ? static_cast<const SampleClient::Person *>(client()) : nullptr;
  }
  const SampleClient::Group *client_as_Group() const {
    return client_type() == SampleClient::Any_Group ? static_cast<const SampleClient::Group *>(client()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CLIENT_TYPE) &&
           VerifyOffset(verifier, VT_CLIENT) &&
           VerifyAny(verifier, client(), client_type()) &&
           verifier.EndTable();
  }
};

template<> inline const SampleClient::Person *Client::client_as<SampleClient::Person>() const {
  return client_as_Person();
}

template<> inline const SampleClient::Group *Client::client_as<SampleClient::Group>() const {
  return client_as_Group();
}

struct ClientBuilder {
  typedef Client Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client_type(SampleClient::Any client_type) {
    fbb_.AddElement<uint8_t>(Client::VT_CLIENT_TYPE, static_cast<uint8_t>(client_type), 0);
  }
  void add_client(flatbuffers::Offset<void> client) {
    fbb_.AddOffset(Client::VT_CLIENT, client);
  }
  explicit ClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline flatbuffers::Offset<Client> CreateClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    SampleClient::Any client_type = SampleClient::Any_NONE,
    flatbuffers::Offset<void> client = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_client(client);
  builder_.add_client_type(client_type);
  return builder_.Finish();
}

struct List_of_Clients FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef List_of_ClientsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<SampleClient::Client>> *clients() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SampleClient::Client>> *>(VT_CLIENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENTS) &&
           verifier.VerifyVector(clients()) &&
           verifier.VerifyVectorOfTables(clients()) &&
           verifier.EndTable();
  }
};

struct List_of_ClientsBuilder {
  typedef List_of_Clients Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clients(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SampleClient::Client>>> clients) {
    fbb_.AddOffset(List_of_Clients::VT_CLIENTS, clients);
  }
  explicit List_of_ClientsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<List_of_Clients> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<List_of_Clients>(end);
    return o;
  }
};

inline flatbuffers::Offset<List_of_Clients> CreateList_of_Clients(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SampleClient::Client>>> clients = 0) {
  List_of_ClientsBuilder builder_(_fbb);
  builder_.add_clients(clients);
  return builder_.Finish();
}

inline flatbuffers::Offset<List_of_Clients> CreateList_of_ClientsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<SampleClient::Client>> *clients = nullptr) {
  auto clients__ = clients ? _fbb.CreateVector<flatbuffers::Offset<SampleClient::Client>>(*clients) : 0;
  return SampleClient::CreateList_of_Clients(
      _fbb,
      clients__);
}

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_Person: {
      auto ptr = reinterpret_cast<const SampleClient::Person *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_Group: {
      auto ptr = reinterpret_cast<const SampleClient::Group *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

inline const SampleClient::List_of_Clients *GetList_of_Clients(const void *buf) {
  return flatbuffers::GetRoot<SampleClient::List_of_Clients>(buf);
}

inline const SampleClient::List_of_Clients *GetSizePrefixedList_of_Clients(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SampleClient::List_of_Clients>(buf);
}

inline bool VerifyList_of_ClientsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SampleClient::List_of_Clients>(nullptr);
}

inline bool VerifySizePrefixedList_of_ClientsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SampleClient::List_of_Clients>(nullptr);
}

inline void FinishList_of_ClientsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SampleClient::List_of_Clients> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedList_of_ClientsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SampleClient::List_of_Clients> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SampleClient

#endif  // FLATBUFFERS_GENERATED_CLIENTSCHEMA_SAMPLECLIENT_H_
