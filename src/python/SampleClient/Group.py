# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SampleClient

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Group(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Group()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Group
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Group
    def GName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Group
    def GAvgAge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Group
    def GAvgWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Group
    def GListOfNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Group
    def GListOfNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Group
    def GListOfNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def GroupStart(builder): builder.StartObject(4)
def Start(builder):
    return GroupStart(builder)
def GroupAddGName(builder, gName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gName), 0)
def AddGName(builder, gName):
    return GroupAddGName(builder, gName)
def GroupAddGAvgAge(builder, gAvgAge): builder.PrependInt16Slot(1, gAvgAge, 0)
def AddGAvgAge(builder, gAvgAge):
    return GroupAddGAvgAge(builder, gAvgAge)
def GroupAddGAvgWeight(builder, gAvgWeight): builder.PrependInt16Slot(2, gAvgWeight, 0)
def AddGAvgWeight(builder, gAvgWeight):
    return GroupAddGAvgWeight(builder, gAvgWeight)
def GroupAddGListOfNames(builder, gListOfNames): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gListOfNames), 0)
def AddGListOfNames(builder, gListOfNames):
    return GroupAddGListOfNames(builder, gListOfNames)
def GroupStartGListOfNamesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGListOfNamesVector(builder, numElems):
    return GroupStartGListOfNamesVector(builder, numElems)
def GroupEnd(builder): return builder.EndObject()
def End(builder):
    return GroupEnd(builder)